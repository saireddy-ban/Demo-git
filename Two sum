import java.util.HashMap;
import java.util.Map;

public class TwoSumSwitch {

    public static int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> numMap = new HashMap<>(); // value -> index
        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            if (numMap.containsKey(complement)) {
                return new int[]{numMap.get(complement), i};
            }
            numMap.put(nums[i], i);
        }
        throw new IllegalArgumentException("No two sum solution");
    }

    public static void main(String[] args) {
        int[] nums = {};
        int target = 0;
        int testCase = 2;  // Change this value to switch between test cases

        switch (testCase) {
            case 1:
                nums = new int[]{2, 7, 11, 15};
                target = 9;
                break;
            case 2:
                nums = new int[]{3, 2, 4};
                target = 6;
                break;
            case 3:
                nums = new int[]{3, 3};
                target = 6;
                break;
            default:
                System.out.println("Invalid test case");
                return;
        }

        int[] result = twoSum(nums, target);
        System.out.println("Output: [" + result[0] + ", " + result[1] + "]");
    }
}
